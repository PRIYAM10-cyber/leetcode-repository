/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null && l2 !=null){
            return l2;
        }else if(l1 != null && l2 ==null){
            return l1;
        }

        ListNode resultList = null;
        int carry = 0;
        ListNode head = null;


        return asyncAddTwoNumbers(l1,l2,resultList,carry,head);
    }

        private ListNode asyncAddTwoNumbers(
            ListNode l1, ListNode l2,
            ListNode resultList, int carry,ListNode head) {
         
        if (l1==null && l2==null && carry==0) {
            return resultList;
        }

        int sum = 0;

        if(l1!=null){
            sum = sum + l1.val;
        }

        if(l2!=null){
            sum = sum + l2.val;
        }

        if(carry!=0){
            sum = sum + carry;
        }

        carry = sum/10;
        sum = sum%10;

        ListNode newNode = new ListNode(sum);

        if(resultList!=null){
            ListNode current = head;
            while(current.next!=null){
                current=current.next;
            }
            current.next = newNode;
        }else{
            resultList = newNode;
            head = newNode;
        }

        ListNode newNode1 = null;
        ListNode newNode2 = null;

        if(l1!=null){
            newNode1 = l1.next;
        }

        if(l2!=null){
            newNode2 = l2.next;
        }

        return asyncAddTwoNumbers(newNode1,newNode2,resultList,carry,head);
    }


}
